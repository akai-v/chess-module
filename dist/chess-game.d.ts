/// <reference types="node" />
import { User, Channel } from "@akaiv/core";
import * as Chess from "chess.js";
import * as fs from "fs";
import { ChessManager } from "./chess-manager";
import { GameHandler } from "./game-handler";
export declare class ChessGame {
    private manager;
    private id;
    private creator;
    static readonly BOARD_WIDTH = 360;
    static readonly BOARD_HEIGHT = 360;
    static readonly PIECE_WIDTH = 45;
    static readonly PIECE_HEIGHT = 45;
    static readonly SQAURE_WIDTH = 45;
    static readonly SQAURE_HEIGHT = 45;
    static readonly HIGHLIGHT_WIDTH = 45;
    static readonly HIGHLIGHT_HEIGHT = 45;
    static readonly BOARD_IMG = "../chess-module/resources/chessboard.png";
    static readonly PIECES_SPRITE_IMG = "../chess-module/resources/chess_pieces.png";
    static readonly OVERLAY_IMG = "../chess-module/resources/chessoverlay.png";
    static readonly HIGHLIGHT_IMG = "../chess-module/resources/highlight.png";
    private static BOARD_BUFFER;
    private static SPRITE_BUFFER;
    private static OVERLAY_BUFFER;
    private static HIGHLIGHT_BUFFER;
    protected static readFileAsync(path: fs.PathLike | number): Promise<Buffer>;
    static getBoard(): Promise<Buffer>;
    static getSprite(): Promise<Buffer>;
    static getOverlay(): Promise<Buffer>;
    static getHighlight(): Promise<Buffer>;
    private challenger;
    private broadcastChannelList;
    private board;
    private started;
    private handler;
    private custom;
    private winner;
    constructor(manager: ChessManager, id: string, creator: User, createdChannel: Channel, fen?: string);
    get Id(): string;
    get Custom(): boolean;
    get Board(): Chess.ChessInstance;
    get Creator(): User;
    get Handler(): GameHandler;
    hasBroadcastChannel(chan: Channel): boolean;
    addBroadcastChannel(chan: Channel): boolean;
    getBroadcastChannelList(): Channel[];
    removeBroadcastChannel(chan: Channel): boolean;
    get Challenger(): User | null;
    set Challenger(challenger: User | null);
    get CanStart(): boolean;
    get Started(): boolean;
    start(): boolean;
    end(): boolean;
    get CurrentTurn(): User;
    get CurrentColor(): string;
    get Winner(): User | null;
    set Winner(winner: User | null);
    getColorPrefix(user: User): string;
    canContinue(): boolean;
    renderChessboard(): Promise<Buffer>;
    sendChessboard(chan: Channel): Promise<void>;
    broadcastStatus(): Promise<void>;
    broadcastMessage(message: string): Promise<void>;
    sendStatus(chan: Channel): Promise<void>;
    broadcastStart(): Promise<void>;
    sendStartMessage(chan: Channel): Promise<false | undefined>;
    broadcastResult(): Promise<void>;
    sendResultMessage(chan: Channel): Promise<void>;
    protected onStart(): Promise<void>;
    protected onEnd(): Promise<void>;
}
